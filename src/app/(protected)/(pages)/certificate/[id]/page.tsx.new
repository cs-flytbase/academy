"use client";
import React, { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Check, X, Download, Award, ArrowLeft, Loader2 } from "lucide-react";
import { useParams, useRouter } from "next/navigation";
import { createClient } from "@/utils/supabase/client";
import Link from "next/link";
import { toast } from "sonner";

// Define interfaces based on the actual database schema
interface Assessment {
  id: number;
  title: string;
  description: string | null;
  category: string | null;
  difficulty: string | null;
  time_limit: number | null;
  thumbnail: string | null;
  created_at: string;
  course_id: number;
}

interface AssessmentAttempt {
  id: number;
  user_id: string;
  assessment_id: number;
  attempt_number: number;
  started_at: string;
  finished_at: string | null;
  score: number | null;
  status: string | null;
  passed: boolean;
}

interface Certificate {
  id: number;
  created_at: string;
  user_id: string;
  url: string;
  name: string;
  email: string;
  assessment_id: number;
}

interface Course {
  id: number;
  title: string;
  description: string | null;
  thumbnail: string | null;
}

const CertificatePage = () => {
  const { id: assessmentId } = useParams(); // Use assessment ID from URL
  const router = useRouter();
  const supabase = createClient();

  // State variables
  const [assessment, setAssessment] = useState<Assessment | null>(null);
  const [course, setCourse] = useState<Course | null>(null);
  const [attempts, setAttempts] = useState<AssessmentAttempt[]>([]);
  const [passedAttempt, setPassedAttempt] = useState<AssessmentAttempt | null>(null);
  const [certificate, setCertificate] = useState<Certificate | null>(null);
  const [currentUser, setCurrentUser] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [generatingCertificate, setGeneratingCertificate] = useState(false);

  // Check for existing certificate
  const checkExistingCertificate = async (userId: string) => {
    try {
      const { data, error } = await supabase
        .from("certificate_user")
        .select("*")
        .eq("user_id", userId)
        .eq("assessment_id", assessmentId)
        .single();

      if (error && error.code !== "PGRST116") {
        console.error("Error checking for certificate:", error);
        return null;
      }

      return data as Certificate;
    } catch (error) {
      console.error("Error checking for certificate:", error);
      return null;
    }
  };

  // Check for passed assessment attempts
  const checkPassedAttempt = (attempts: AssessmentAttempt[]) => {
    if (!attempts || attempts.length === 0) return null;
    
    const passedAttempts = attempts.filter(attempt => 
      attempt.assessment_id === Number(assessmentId) && attempt.passed === true);
    
    // Sort by date (most recent first) and return the first one
    passedAttempts.sort((a, b) => 
      new Date(b.finished_at || b.started_at).getTime() - 
      new Date(a.finished_at || a.started_at).getTime()
    );
    
    return passedAttempts.length > 0 ? passedAttempts[0] : null;
  };

  // Function to fetch assessment data and certificate status
  const fetchData = async () => {
    try {
      if (!assessmentId) return;
      setLoading(true);
      
      // Get current user
      const { data: userData } = await supabase.auth.getUser();
      if (!userData?.user) {
        console.error("User not logged in");
        setLoading(false);
        return;
      }
      
      setCurrentUser(userData.user);
      
      // Fetch assessment details
      const { data: assessmentData, error: assessmentError } = await supabase
        .from("assessments")
        .select("*")
        .eq("id", assessmentId)
        .single();

      if (assessmentError) {
        console.error("Error fetching assessment:", assessmentError);
        setLoading(false);
        return;
      }

      setAssessment(assessmentData);

      // Fetch associated course
      if (assessmentData.course_id) {
        const { data: courseData, error: courseError } = await supabase
          .from("courses")
          .select("*")
          .eq("id", assessmentData.course_id)
          .single();

        if (!courseError) {
          setCourse(courseData);
        }
      }

      // Fetch assessment attempts for the user
      const { data: attemptsData, error: attemptsError } = await supabase
        .from("assessment_attempts")
        .select("*")
        .eq("user_id", userData.user.id)
        .eq("assessment_id", assessmentId);

      if (!attemptsError && attemptsData) {
        setAttempts(attemptsData);
        
        // Check if user has passed this assessment
        const passed = checkPassedAttempt(attemptsData);
        setPassedAttempt(passed);

        // If user has passed, check for existing certificate
        if (passed) {
          const cert = await checkExistingCertificate(userData.user.id);
          setCertificate(cert);
        }
      }
      
      setLoading(false);
    } catch (error) {
      console.error("Error fetching data:", error);
      setLoading(false);
    }
  };

  // Initial data loading
  useEffect(() => {
    fetchData();
  }, [assessmentId]);

  // Check if certificate is unlocked (user has passed the assessment)
  const isCertificateUnlocked = () => {
    return passedAttempt !== null;
  };

  // Function to open certificate URL
  const openCertificate = () => {
    if (certificate?.url) {
      window.open(certificate.url, "_blank");
    } else {
      toast.error("Certificate URL not found");
    }
  };

  // Generate certificate function
  const generateCertificate = async () => {
    // Check if the user has passed the assessment
    if (!isCertificateUnlocked()) {
      toast.error("You must pass the assessment to generate a certificate");
      return;
    }
    
    if (!currentUser || !assessment || !course) {
      toast.error("Missing required information to generate certificate");
      return;
    }
    
    try {
      setGeneratingCertificate(true);
      
      // Prepare data for the webhook
      const certificateData = {
        email: currentUser.email,
        name: currentUser.user_metadata?.full_name || currentUser.email,
        course: course.title,
        courseID: course.id.toString(),
        userID: currentUser.id,
        assessmentID: assessmentId
      };
      
      // Send data to the webhook
      const response = await fetch(
        "https://srv-roxra.app.n8n.cloud/webhook/d1e598f4-24e7-40fe-be60-91410aedd49c",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(certificateData),
        }
      );
      
      if (!response.ok) {
        throw new Error(`Error: ${response.status}`);
      }
      
      // Wait for 2 seconds to allow certificate creation to complete on server
      setTimeout(() => {
        toast.success("Certificate generated successfully!");
        fetchData(); // Refresh the data to get the newly created certificate
        setGeneratingCertificate(false);
      }, 2000);
      
    } catch (error) {
      console.error("Error generating certificate:", error);
      toast.error("Failed to generate certificate. Please try again.");
      setGeneratingCertificate(false);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-[#121212]">
        <div className="w-8 h-8 border-2 border-[#6b5de4] border-t-transparent rounded-full animate-spin"></div>
      </div>
    );
  }

  if (!assessment) {
    return (
      <div className="min-h-screen bg-[#121212] text-white flex flex-col items-center justify-center">
        <div className="bg-[#1a1a1a] p-6 rounded-lg max-w-md w-full">
          <h2 className="text-xl font-semibold mb-4">Assessment Not Found</h2>
          <p className="text-gray-400 mb-6">The assessment you're looking for doesn't exist or has been removed.</p>
          <Link href="/dashboard" className="text-[#6b5de4] hover:text-[#5a4dd0] flex items-center">
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back to Dashboard
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-[#121212] text-white">
      <div className="max-w-4xl mx-auto p-6 md:p-8">
        {/* Back button */}
        <Link href="/dashboard" className="inline-flex items-center text-gray-400 hover:text-white mb-6">
          <ArrowLeft className="w-4 h-4 mr-2" />
          Back to Dashboard
        </Link>
        
        <div className="flex flex-col md:flex-row justify-between items-start mb-8">
          <div>
            <h1 className="text-2xl md:text-3xl font-bold">{assessment.title} Certificate</h1>
            {course && <p className="text-gray-400 mt-1">Course: {course.title}</p>}
          </div>

          {/* Assessment meta */}
          <div className="mt-4 md:mt-0 flex flex-wrap gap-2">
            {assessment.difficulty && (
              <span className="px-3 py-1 rounded-full text-xs bg-[#242424] text-gray-300">
                {assessment.difficulty}
              </span>
            )}
            {assessment.category && (
              <span className="px-3 py-1 rounded-full text-xs bg-[#242424] text-gray-300">
                {assessment.category}
              </span>
            )}
            {assessment.time_limit && (
              <span className="px-3 py-1 rounded-full text-xs bg-[#242424] text-gray-300">
                {assessment.time_limit} min
              </span>
            )}
          </div>
        </div>

        {/* Certificate Preview */}
        <div className="bg-[#1a1a1a] p-6 rounded-lg border border-gray-800">
          {isCertificateUnlocked() ? (
            <>
              <div className="flex items-center justify-between mb-4">
                <p className="text-green-400 flex items-center">
                  <Check className="w-5 h-5 mr-2" />
                  You've passed this assessment!
                </p>
              </div>

              <div className="aspect-[4/3] max-w-2xl mx-auto bg-[#242424] rounded-lg flex flex-col items-center justify-center p-8 transition-all duration-300 hover:shadow-lg">
                <div className="text-center">
                  <Award className="w-16 h-16 text-[#6b5de4] mx-auto mb-4" />
                  <h3 className="text-2xl font-bold mb-4">
                    Certificate of Completion
                  </h3>
                  <div className="w-24 h-1 bg-[#6b5de4] mx-auto mb-4"></div>
                  <p className="text-gray-300 mb-2">This certifies that</p>
                  <p className="text-xl font-semibold mb-2">{currentUser?.email}</p>
                  <p className="text-gray-300 mb-2">has successfully completed</p>
                  <p className="text-xl font-semibold mb-6">{assessment.title}</p>
                  
                  <div className="flex justify-center text-gray-400 text-sm">
                    <p>Issued {new Date().toLocaleDateString()}</p>
                  </div>
                </div>
              </div>

              {/* Certificate status */}
              {certificate && (
                <div className="mt-4 p-3 bg-green-500/10 border border-green-500/30 rounded-md">
                  <div className="flex items-center text-green-400 mb-2">
                    <Check className="w-5 h-5 mr-2" />
                    <p className="font-medium">
                      Certificate already generated!
                    </p>
                  </div>
                  <p className="text-sm text-gray-300 mb-2">
                    Your certificate was created on{" "}
                    {new Date(certificate.created_at).toLocaleDateString()}.
                  </p>
                  {certificate.name && (
                    <p className="text-sm text-gray-300">
                      Recipient:{" "}
                      <span className="text-white">
                        {certificate.name}
                      </span>
                    </p>
                  )}
                </div>
              )}

              {certificate ? (
                <Button
                  onClick={openCertificate}
                  className="w-full bg-green-600 hover:bg-green-700 py-3 mt-4"
                >
                  <Download className="w-4 h-4 mr-2" />
                  Download Certificate
                </Button>
              ) : (
                <Button
                  onClick={generateCertificate}
                  disabled={generatingCertificate}
                  className="w-full bg-[#6b5de4] hover:bg-[#5a4dd0] py-3 mt-4"
                >
                  {generatingCertificate ? (
                    <>
                      <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                      Generating Certificate...
                    </>
                  ) : (
                    <>
                      <Award className="w-4 h-4 mr-2" />
                      Generate Certificate
                    </>
                  )}
                </Button>
              )}
            </>
          ) : (
            <>
              <div className="flex items-center justify-between mb-4">
                <p className="text-gray-300 flex items-center">
                  <X className="w-5 h-5 mr-2 text-red-400" />
                  You need to pass the assessment to earn your certificate
                </p>
              </div>

              <div className="aspect-[4/3] max-w-2xl mx-auto bg-[#242424] rounded-lg flex flex-col items-center justify-center p-8 relative overflow-hidden">
                {/* Locked overlay */}
                <div className="absolute inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-10">
                  <div className="bg-[#1a1a1a] rounded-full p-5 shadow-lg">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      className="h-12 w-12 text-[#6b5de4]"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <rect x="3" y="11" width="18" height="11" rx="2" ry="2" />
                      <path d="M7 11V7a5 5 0 0 1 10 0v4" />
                    </svg>
                  </div>
                </div>

                {/* Blurred certificate preview */}
                <div className="text-center filter blur-sm">
                  <h3 className="text-2xl font-bold mb-4">
                    Certificate of Completion
                  </h3>
                  <div className="w-24 h-1 bg-[#6b5de4] mx-auto mb-4"></div>
                  <p className="text-gray-400 mb-6">
                    Pass the assessment to unlock your certificate
                  </p>
                </div>
              </div>

              {/* Assessment attempt info */}
              <div className="mt-6">
                <h3 className="font-medium text-lg mb-2">Your Attempts</h3>
                
                {attempts.length > 0 ? (
                  <div className="space-y-2">
                    {attempts.map((attempt) => (
                      <div key={attempt.id} className="bg-[#242424] p-3 rounded-md flex justify-between items-center">
                        <div>
                          <p className="text-sm">
                            Attempt #{attempt.attempt_number} -{" "}
                            <span className="text-gray-400">
                              {new Date(attempt.started_at).toLocaleDateString()}
                            </span>
                          </p>
                          {attempt.score !== null && (
                            <p className="text-sm mt-1">
                              Score: <span className="font-medium">{attempt.score}%</span>
                            </p>
                          )}
                        </div>
                        <div>
                          {attempt.passed ? (
                            <span className="px-2 py-1 bg-green-500/20 text-green-400 text-xs rounded">
                              Passed
                            </span>
                          ) : (
                            <span className="px-2 py-1 bg-red-500/20 text-red-400 text-xs rounded">
                              Failed
                            </span>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <p className="text-gray-400 text-sm">You haven't attempted this assessment yet.</p>
                )}
                
                <Button
                  onClick={() => router.push(`/test/${assessmentId}`)}
                  className="w-full bg-[#6b5de4] hover:bg-[#5a4dd0] py-3 mt-4"
                >
                  Take Assessment
                </Button>
              </div>
            </>
          )}
        </div>

        {/* Course link */}
        {course && (
          <div className="mt-8 border-t border-gray-800 pt-6">
            <Link href={`/course/${course.id}`} className="text-[#6b5de4] hover:text-[#5a4dd0] flex items-center">
              <ArrowLeft className="w-4 h-4 mr-2" />
              Back to {course.title}
            </Link>
          </div>
        )}
      </div>
    </div>
  );
};

export default CertificatePage;
